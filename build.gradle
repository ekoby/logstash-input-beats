import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group 'org.logstash.beats'
version "${new File("VERSION").text.trim()}"

description = "Beats/Lumberjack Netty implementation"

sourceCompatibility = 11
targetCompatibility = 11

String jacksonVersion = '2.9.10'
String jacksonDatabindVersion = '2.9.10.8'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.17.0'
    implementation 'io.netty:netty-all:4.1.65.Final'
    implementation 'org.javassist:javassist:3.24.0-GA'
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}"
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation 'org.slf4j:slf4j-simple:2.0.5'
    implementation 'org.slf4j:log4j-over-slf4j:2.0.5'
    implementation('org.openziti:ziti-netty:0.23.18'){
      exclude group: 'io.netty'
    }
}

test {
    systemProperties.put "io.netty.leakDetectionLevel", "paranoid"
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task run (type: JavaExec, dependsOn: classes){
    // turn on or off ssl
    if(project.hasProperty('providedargs')){
        args(providedargs.split(','))
    }
    description = "Beats testing"
    main = "org.logstash.beats.Runner"
    classpath = sourceSets.main.runtimeClasspath
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-beats_jars.rb')
            jars_file.newWriter().withWriter { w ->
                w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
                    w << "require \'jar_dependencies\'\n"
                    configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
                        def dep = it.moduleVersion.id
                        w << "require_jar(\'${dep.group}\', \'${dep.name}\', \'${dep.version}\')\n"
                    }
                w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
            }
    }
}

task vendor {
    doLast {
        configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { dep ->
                    println("group:${dep.moduleVersion.id.group} name:${dep.moduleVersion.id.name} version:${dep.moduleVersion.id.version} >> ${dep.file}")
        }

        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def dep = artifact.moduleVersion.id
            File f = artifact.file
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
